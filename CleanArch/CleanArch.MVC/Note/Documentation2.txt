1. viewmodel in CleanArch.Application
	* viewModel mask our Domain Entity
	* Add Class inside ViewModels and name it => "CourseViewModel" and add the following code.
	public class CourseViewModel
	{
	// list all courses in course
	  public IEnumerable<Course> Courses{get;set;}

	}
	* Rebuild
2. Inside the Interface folder add "ICourseService" and add the following code.
public interface ICourseService
{
	CourseViewModel GetCourses();
}

3. in Domain folder and ClearArch.Domain class library add a new folder and name it "Interface"
	*
	* add interface and call it 'ICourseRepository' then add the following code.

		public interface ICourseRepository
		{
		  //
			IEnumerable<Course> GetCourses();
		}
   * Commit and call it "Commit service and Repository Interface, CourseViewModel" 
4. Implement interface
	* inside the 'Service' folder in the ClearArch.Application add a new class and call it "CourseService" 
	   and add the following code.
	   public class CourseService : ICourseService
	{
		// call repositoty or dependecy injection 

		private ICourseRepository _courseRepository;

		//Constractor and inject repository
		public CourseService(ICourseRepository courseRepository)
		{
			_courseRepository = courseRepository;
		}
		public CourseViewModel GetCourses()
		{
			return new CourseViewModel()
			{
				Courses= _courseRepository.GetCourses()
			};
		}
	}
5. Add 'Repository' folder inside the CleanArch.Infra.Data in Infra.Data folder
	*  Add a new class and call it 'CourseRepository' and implement the following.
	public class CourseRepository : ICourseRepository
	{
		private UniveristyDBContext _ctx; // injection
										  // constructor.
		public CourseRepository(UniveristyDBContext ctx)
		{
			_ctx = ctx;
		}

		public IEnumerable<Course> GetCourses()
		{
			return _ctx.Courses;
		}
	}
6. 
